# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dlBlmReFCESM5pwLBrHUOxT1uiqf2z8R
"""

import pandas as pd
import numpy as np
# Code to read csv file into Colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
link = 'https://drive.google.com/file/d/1KEQCysbOLUCBgdfrzml1RGm--7gzjLBW/view?usp=sharing'
id = '1KEQCysbOLUCBgdfrzml1RGm--7gzjLBW'
downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('Filename.csv')  
dataset = pd.read_csv('celsius_a_fahrenheit.csv')

dataset.head()

#importamos las libreria para graficar 
#Graficamos la data real
import matplotlib.pyplot as plt
plt.scatter(dataset.Celsius,dataset.Fahrenheit, c='red', label='Real')
plt.xlabel('Celcius')
plt.ylabel('Farenheit')
plt.legend()
plt.grid(True)
plt.title('Real Data')
plt.show()

#verificamos que no existan datos incorrectos
index = 0
for test in dataset.Celsius :
  correct = test*1.8 + 32
  if correct != dataset.Fahrenheit.get(index):
    print(f'correcto: {correct}, actual: {dataset.Fahrenheit.get(index)}')
    dataset.Fahrenheit[index] = correct
    print(f'ahora: {dataset.Fahrenheit.get(index)}')
  index+=1

#importamos las libreria para graficar 
#Graficamos la data real
import matplotlib.pyplot as plt
plt.scatter(dataset.Celsius,dataset.Fahrenheit, c='red', label='Real')
plt.xlabel('Celcius')
plt.ylabel('Farenheit')
plt.legend()
plt.grid(True)
plt.title('Real Data')
plt.show()

#tranformamos los datos a conveniencia del algoritmo de 1D a 2D
celarray = np.array(dataset.Celsius)
fararray = np.array(dataset.Fahrenheit)
celarray= np.reshape(celarray,(-1,1))
fararray = np.reshape(fararray,(-1,1))

#ahora importamos la libreria Sklearn para instaciar nuestra regresion lineal model
from sklearn.linear_model import LinearRegression
LR = LinearRegression()
LR.fit(celarray,fararray)

#hacemos un conjunto de datos de prueba (Vamos a meter los datos que no existian en el dataset)

celcius_test = np.reshape([-74,-23,-80,-91],(-1,1))
farenheit_predict = LR.predict(celcius_test)

plt.scatter(dataset.Celsius,dataset.Fahrenheit, c='blue', label='Datos Reales')
plt.scatter(celcius_test, farenheit_predict, c='red', label='Datos predichos')
plt.xlabel('Celcius')
plt.ylabel('Fahrenheit')
plt.legend()
plt.grid(True)
plt.title('Estimada vs Datos reales')
plt.show()

a=LR.coef_
b=LR.predict([[0]])
print(f'a: {a}, b: {b}')

x_range = np.arange(-75,100)
f = x_range*1.8 + 32

plt.plot(x_range,f,c='orange', label='Ecuacion')
plt.scatter(dataset.Celsius,dataset.Fahrenheit, c='blue', label='Datos Reales')
plt.scatter(celcius_test, farenheit_predict, c='red', label='Datos predichos')
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.title('estimated and real data vs equation')
plt.show()

acc_train = LR.score(celarray,fararray)
print('Pesicion de entrenamiento:',acc_train)

acc_test = LR.score(celcius_test,farenheit_predict)
print(f'Presicion de prediccion', acc_test)
print(f'Grados centigrados: {celcius_test}')
print(f'Grados farengeigth: {farenheit_predict}')